use crate::pac;

/// Ideally the implementations of this trait for all peripherals would be
/// generated by svd2rust already because the ptr() associated functions exists
/// anyway.
pub trait PeripheralPtrExt {
    type RegisterBlock;

    /// RTFM does not like long lived references.
    /// Instead the `ptr()` trait method can be used to obtain multiple
    /// *aliasing* references to the registers of a single peripheral. Care
    /// must be taken to not use read-modify-write operations on registers
    /// that are shared by multiple references. For atomic bit set or clear
    /// operations use references from `ptr_clear()` or `ptr_set()`.
    fn ptr() -> *const Self::RegisterBlock;
}

macro_rules! impl_peripheral_ptr_ext {
    ($PER:ty, $REG_BLOCK:ty) => {
        impl PeripheralPtrExt for $PER {
            type RegisterBlock = $REG_BLOCK;

            fn ptr() -> *const Self::RegisterBlock {
                Self::ptr()
            }
        }
    };
}

impl_peripheral_ptr_ext!(pac::GPIO, pac::gpio::RegisterBlock);
impl_peripheral_ptr_ext!(pac::USART0, pac::usart0::RegisterBlock);
impl_peripheral_ptr_ext!(pac::USART1, pac::usart0::RegisterBlock);
impl_peripheral_ptr_ext!(pac::USART2, pac::usart0::RegisterBlock);
impl_peripheral_ptr_ext!(pac::USART3, pac::usart0::RegisterBlock);

/// Extension trait to use the peripheral bit set and clear feature.
pub trait PeripheralClearSetExt: PeripheralPtrExt {
    /// Returns a pointer to the register block in aliased peripheral bit clear
    /// memory region.
    ///
    /// Allows to clear bitfields without a read-modify-write operation.
    fn ptr_clear() -> *const Self::RegisterBlock {
        unsafe { (Self::ptr() as *const u8).offset(0x0400_0000) as *const Self::RegisterBlock }
    }

    /// Returns a pointer to the register block in aliased peripheral bit set
    /// memory region.
    ///
    /// Allows to set bitfields without a read-modify-write operation.
    fn ptr_set() -> *const Self::RegisterBlock {
        unsafe { (Self::ptr() as *const u8).offset(0x0600_0000) as *const Self::RegisterBlock }
    }
}

impl<P: PeripheralPtrExt> PeripheralClearSetExt for P {}
